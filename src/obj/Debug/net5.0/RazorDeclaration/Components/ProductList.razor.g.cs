// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ContosoCrafts.WebSite.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "U:\Team3Project\src\Components\ProductList.razor"
using ContosoCrafts.WebSite.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "U:\Team3Project\src\Components\ProductList.razor"
using ContosoCrafts.WebSite.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "U:\Team3Project\src\Components\ProductList.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "U:\Team3Project\src\Components\ProductList.razor"
using Microsoft.AspNetCore.Mvc.Rendering;

#line default
#line hidden
#nullable disable
    public partial class ProductList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 203 "U:\Team3Project\src\Components\ProductList.razor"
 
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    // New Comment Flag to show the input box or not
    bool NewComment = false;

    // Next Comment Text is what the comment text is
    string NewCommentText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddComment()
    {
        // Refactor to be a call to the middle tier
        // ProductService.AddCommentToProduct(selectedProduct, comment);


        // Add it to the Comment List
        selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });

        // Call for the Product to be saved
        ProductService.UpdateData(selectedProduct);

        // Set the NewComment flag to false to hide the input box
        NewComment = false;

        NewCommentText = "";
    }

    void ClearComment()
    {
        NewComment = false;
        NewCommentText = "";
    }

    string FilterDataString = "";
    bool FilterData = false;

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    //setup select value from dropdown menu
    //for category filter
    string selectedValue = "";
    bool selectedData = false;

    //Update select value for category filter feature
    void UpdateSelectedText(string text)
    {
        if (text.Equals("Select a Category"))
        {
            selectedValue = "";
            selectedData = false;
        }
        else
        {
            selectedValue = text;
            selectedData = true;
        }
    }

    void EnableFilterData()
    {
        // If the filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the filter is enabled, set the filter flag
        FilterDataString = "";
        FilterData = false;
        selectedValue = string.Empty;
    }

    void MovetoRent(string id)
    {
        NavManager.NavigateTo("../Product/Rent/" + id, true);
    }

    void MovetoReturn(string id)
    {
        NavManager.NavigateTo("../Product/Return/" + id, true);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private JsonFileProductService ProductService { get; set; }
    }
}
#pragma warning restore 1591
